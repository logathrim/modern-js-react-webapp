import { Lesson } from '../../types';

export const templateLiteralsLesson: Lesson = {
  id: 3,
  title: 'Template Literals',
  duration: '15 ‡∏ô‡∏≤‡∏ó‡∏µ',
  content: `# üé® Template Literals

> *"Template Literals make string manipulation elegant and powerful in Modern JavaScript"*

## üìù ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ

‚ú® String Interpolation  
üîÑ Multiline Strings  
üéØ Tagged Templates  
üí° Expression Evaluation  

## 1. üé® String Interpolation

### ‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏£‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
- üìù ‡πÉ‡∏ä‡πâ \${expression} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡∏£‡∏Å‡∏Ñ‡πà‡∏≤
- üéØ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö expressions ‡∏ó‡∏∏‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
- üí° ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö functions
- üöÄ ‡πÅ‡∏ó‡∏£‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß

### Expressions
- üîÑ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏≤‡∏á‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå
- üé® ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å functions
- üí° Ternary operators
- ‚ö°Ô∏è Template literals ‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô

## 2. üåü Multiline Strings

### ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
- üìù ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ \\n
- üéØ ‡∏£‡∏±‡∏Å‡∏©‡∏≤ formatting ‡πÅ‡∏•‡∏∞ indentation
- üí° ‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
- üé® ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HTML templates

### Use Cases
- üìÑ HTML Templates
- üìù SQL Queries
- üí° Documentation
- üéØ Email Templates

## 3. üöÄ Tagged Templates

### ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
- üéØ Custom string processing
- üîÑ Dynamic content manipulation
- üí° Internationalization (i18n)
- üîí Security (XSS prevention)

### Advanced Features
- üé® String transformation
- üîí Input sanitization
- üí° DSL (Domain Specific Language)
- ‚ö°Ô∏è Dynamic styling (CSS-in-JS)

> üí° **Pro Tips**: 
> - ‡πÉ‡∏ä‡πâ Tagged Templates ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ string ‡πÅ‡∏ö‡∏ö‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
> - ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á indentation ‡πÉ‡∏ô multiline strings
> - ‡πÉ‡∏ä‡πâ template literals ‡πÅ‡∏ó‡∏ô string concatenation ‡πÄ‡∏™‡∏°‡∏≠`,
  codeExamples: [
    {
      title: 'üé® String Interpolation Examples',
      language: 'javascript',
      code: `// Basic interpolation
const name = 'John';
const age = 30;
const greeting = \`Hello, \${name}!\`;

// Complex expressions
const price = 99.99;
const tax = 0.07;
const total = \`Total: $\${(price * (1 + tax)).toFixed(2)}\`;

// Nested templates
const items = ['apple', 'banana', 'orange'];
const html = \`
  <ul>
    \${items.map(item => \`
      <li>\${item}</li>
    \`).join('')}
  </ul>
\`;

// Conditional expressions
const status = 'premium';
const message = \`
  Your account is \${status === 'premium' ? 'Premium üåü' : 'Basic'}
  \${status === 'premium' ? \`
    Premium benefits:
    - Priority support
    - Advanced features
  \` : ''}
\`;`
    },
    {
      title: 'üåü Multiline and Tagged Templates',
      language: 'javascript',
      code: `// Email template
const emailTemplate = \`
Dear \${user.name},

Thank you for your recent purchase of \${product.name}.
Your order details:

Order ID: \${order.id}
Total: $\${order.total}

Best regards,
The Team
\`;

// Tagged template for safe HTML
function html(strings, ...values) {
  return strings.reduce((result, str, i) => {
    const value = values[i - 1];
    // Escape HTML special characters
    const safeValue = value?.replace(/[&<>'"]/g, 
      char => ({
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        "'": '&#39;',
        '"': '&quot;'
      }[char]) ?? char
    );
    return result + safeValue + str;
  });
}

// Usage
const userInput = '<script>alert("XSS")</script>';
const safeHtml = html\`
  <div class="user-content">
    \${userInput}
  </div>
\`;

// CSS-in-JS example
const styled = (strings, ...values) => {
  const styles = strings.reduce((result, str, i) => 
    result + str + (values[i] || ''), '');
  
  const className = 'styled-' + Math.random().toString(36).slice(2);
  const styleElement = document.createElement('style');
  styleElement.textContent = \`
    .\${className} {
      \${styles}
    }
  \`;
  document.head.appendChild(styleElement);
  return className;
};

// Usage
const buttonClass = styled\`
  background: \${props => props.primary ? 'blue' : 'gray'};
  color: white;
  padding: 10px 20px;
  border-radius: 4px;
\`;`
    }
  ],
  quiz: [
    {
      id: 1,
      question: "Template Literals ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô?",
      options: [
        "Single quotes (')",
        "Double quotes (\")",
        "Backticks (`)",
        "Forward slashes (/)"
      ],
      correctAnswer: 2,
      explanation: "Template Literals ‡πÉ‡∏ä‡πâ backticks (`) ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô ‡∏ã‡∏∂‡πà‡∏á‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô multiline strings ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ string interpolation ‡πÑ‡∏î‡πâ"
    },
    {
      id: 2,
      question: "‡∏Ç‡πâ‡∏≠‡πÉ‡∏î‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏Ç‡∏≠‡∏á Tagged Templates?",
      options: [
        "‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô multiline strings ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
        "‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏£‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
        "‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ string ‡πÅ‡∏ö‡∏ö custom ‡πÅ‡∏•‡∏∞ sanitization",
        "‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô comments"
      ],
      correctAnswer: 2,
      explanation: "Tagged Templates ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ string ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ sanitization, internationalization ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á DSL"
    },
    {
      id: 3,
      question: "String Interpolation ‡πÉ‡∏ô Template Literals ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á?",
      options: [
        "‡πÅ‡∏ó‡∏£‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
        "‡πÅ‡∏ó‡∏£‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏•‡∏∞ expressions ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô",
        "‡πÅ‡∏ó‡∏£‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
        "‡πÅ‡∏ó‡∏£‡∏Å HTML tags ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
      ],
      correctAnswer: 1,
      explanation: "String Interpolation ‡πÉ‡∏ô Template Literals ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ó‡∏£‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£, expressions, ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì, ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ${} syntax"
    },
    {
      id: 4,
      question: "‡∏Ç‡πâ‡∏≠‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏Ç‡∏≠‡∏á Multiline Strings ‡πÉ‡∏ô Template Literals?",
      options: [
        "‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ \\n ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏™‡∏°‡∏≠",
        "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏Å‡∏©‡∏≤ formatting",
        "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ interpolation ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î",
        "‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ + ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏°‡∏≠"
      ],
      correctAnswer: 1,
      explanation: "Template Literals ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ \\n ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤ formatting ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πâ‡πÑ‡∏î‡πâ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏™‡∏∞‡∏î‡∏ß‡∏Å"
    }
  ]
};