import { Lesson } from "../../types";

export const arrayMethodsLesson: Lesson = {
  id: 10,
  title: "Advanced Array Methods",
  duration: "30 ‡∏ô‡∏≤‡∏ó‡∏µ",
  content: `# üéØ Advanced Array Methods

> *"Master the power of functional programming with Modern JavaScript array methods"*

## üìù ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ

‚ú® Transformation Methods  
üîÑ Search ‡πÅ‡∏•‡∏∞ Filter  
üéØ Aggregation Methods  
üí° Chaining Operations  

## 1. üé® Transformation Methods

### map()
- üì¶ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÉ‡∏ô array
- üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏™‡∏°‡∏≠
- üí° Immutable operations
- ‚ö°Ô∏è One-to-one transformation

### flatMap()
- üîÑ Map ‡πÅ‡∏•‡∏∞ flatten ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
- üéØ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ nested arrays
- üí° Performance optimization
- üöÄ One-to-many transformation

## 2. üîç Search ‡πÅ‡∏•‡∏∞ Filter

### filter()
- üéØ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
- üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏™‡∏°‡∏≠
- üì¶ Predicate functions
- ‚ö°Ô∏è Chainable operations

### find() ‡πÅ‡∏•‡∏∞ findIndex()
- üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
- üéØ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
- üí° Early termination
- üöÄ Performance efficient

## 3. üìä Aggregation Methods

### reduce()
- üîÑ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
- üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
- üí° Complex transformations
- ‚ö°Ô∏è Flexible accumulation

### some() ‡πÅ‡∏•‡∏∞ every()
- ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß
- ‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß
- üí° Early termination
- üéØ Boolean results

> üí° **Pro Tips**: 
> - ‡πÉ‡∏ä‡πâ method chaining ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á data transformation pipeline
> - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ method ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠ performance ‡∏ó‡∏µ‡πà‡∏î‡∏µ
> - ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á mutability ‡∏Ç‡∏≠‡∏á array methods`,
  codeExamples: [
    {
      title: "üé® Transformation Examples",
      language: "javascript",
      code: `// Map transformation
const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(n => n * 2);
const formatted = numbers.map(n => \`Number: \${n}\`);

// FlatMap example
const orders = [
  { id: 1, items: ['apple', 'banana'] },
  { id: 2, items: ['orange'] }
];
const allItems = orders.flatMap(order => order.items);

// Complex transformations
const users = [
  { id: 1, name: 'John', age: 30 },
  { id: 2, name: 'Jane', age: 25 }
];

const userProfiles = users
  .map(user => ({
    ...user,
    displayName: \`\${user.name} (\${user.age})\`,
    isAdult: user.age >= 18
  }))
  .sort((a, b) => a.age - b.age);

// Nested transformations
const matrix = [[1, 2], [3, 4]];
const flattened = matrix.flatMap(row => 
  row.map(n => n * 2)
);`,
    },
    {
      title: "üîç Filter ‡πÅ‡∏•‡∏∞ Search Examples",
      language: "javascript",
      code: `// Filter examples
const numbers = [1, 2, 3, 4, 5, 6];
const evens = numbers.filter(n => n % 2 === 0);
const odds = numbers.filter(n => n % 2 === 1);

// Complex filtering
const users = [
  { id: 1, name: 'John', age: 30, active: true },
  { id: 2, name: 'Jane', age: 25, active: false },
  { id: 3, name: 'Bob', age: 35, active: true }
];

const activeAdults = users.filter(user => 
  user.active && user.age >= 18
);

// Search operations
const findUser = (id) => users.find(user => user.id === id);
const findUserIndex = (id) => users.findIndex(user => user.id === id);

// Search with early termination
const hasInactiveUser = users.some(user => !user.active);
const allActive = users.every(user => user.active);

// Advanced search patterns
function searchUsers(query) {
  return users.filter(user => 
    Object.values(user)
      .some(value => 
        String(value)
          .toLowerCase()
          .includes(query.toLowerCase())
      )
  );
}`,
    },
    {
      title: "üìä Reduce ‡πÅ‡∏•‡∏∞ Aggregation Examples",
      language: "javascript",
      code: `// Basic reduction
const numbers = [1, 2, 3, 4, 5];
const sum = numbers.reduce((acc, curr) => acc + curr, 0);
const product = numbers.reduce((acc, curr) => acc * curr, 1);

// Object transformation
const users = [
  { id: 1, name: 'John', age: 30 },
  { id: 2, name: 'Jane', age: 25 },
  { id: 3, name: 'Bob', age: 35 }
];

// Group by age range
const usersByAgeGroup = users.reduce((groups, user) => {
  const ageGroup = \`\${Math.floor(user.age / 10) * 10}s\`;
  return {
    ...groups,
    [ageGroup]: [...(groups[ageGroup] || []), user]
  };
}, {});

// Create lookup table
const userMap = users.reduce((map, user) => ({
  ...map,
  [user.id]: user
}), {});

// Complex aggregation
const orderData = [
  { product: 'A', quantity: 2, price: 10 },
  { product: 'B', quantity: 1, price: 20 },
  { product: 'A', quantity: 3, price: 10 }
];

const orderSummary = orderData.reduce((summary, order) => {
  const { product, quantity, price } = order;
  
  if (!summary[product]) {
    summary[product] = {
      totalQuantity: 0,
      totalValue: 0,
      orders: []
    };
  }
  
  summary[product].totalQuantity += quantity;
  summary[product].totalValue += quantity * price;
  summary[product].orders.push(order);
  
  return summary;
}, {});`,
    },
  ],
  quiz: [
    {
      id: 1,
      question: "map() ‡πÅ‡∏•‡∏∞ flatMap() ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
      options: [
        "map() ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ flatMap()",
        "map() ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡πÉ‡∏´‡∏°‡πà, flatMap() ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç array ‡πÄ‡∏î‡∏¥‡∏°",
        "flatMap() ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ map() ‡πÅ‡∏•‡∏∞ flat() ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß",
        "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á",
      ],
      correctAnswer: 2,
      explanation:
        "flatMap() ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á map() ‡πÅ‡∏•‡∏∞ flat() ‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ flatten array ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ one-to-many transformations",
    },
    {
      id: 2,
      question: "reduce() method ‡πÉ‡∏ä‡πâ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á?",
      options: [
        "‡πÉ‡∏ä‡πâ‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
        "‡πÉ‡∏ä‡πâ‡πÅ‡∏õ‡∏•‡∏á array ‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
        "‡πÉ‡∏ä‡πâ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏´‡∏£‡∏∑‡∏≠ array ‡πÉ‡∏´‡∏°‡πà",
        "‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
      ],
      correctAnswer: 2,
      explanation:
        "reduce() ‡πÄ‡∏õ‡πá‡∏ô method ‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏°‡∏≤‡∏Å ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤, ‡∏™‡∏£‡πâ‡∏≤‡∏á object, ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡πÉ‡∏´‡∏°‡πà",
    },
    {
      id: 3,
      question: "some() ‡πÅ‡∏•‡∏∞ every() ‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
      options: [
        "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á",
        "some() ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß, every() ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß",
        "some() ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ every()",
        "every() ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
      ],
      correctAnswer: 1,
      explanation:
        "some() ‡∏à‡∏∞ return true ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ó‡∏µ‡πà every() ‡∏à‡∏∞ return true ‡∏Å‡πá‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö",
    },
    {
      id: 4,
      question: "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ find() ‡πÅ‡∏ó‡∏ô filter()?",
      options: [
        "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô array",
        "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç",
        "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
      ],
      correctAnswer: 1,
      explanation:
        "‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ find() ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ find() ‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ filter() ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ",
    },
  ],
};
