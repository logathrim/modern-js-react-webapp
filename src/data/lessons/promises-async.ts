import { Lesson } from '../../types';

export const promisesAsyncLesson: Lesson = {
  id: 9,
  title: 'Promises ‡πÅ‡∏•‡∏∞ Async/Await',
  duration: '35 ‡∏ô‡∏≤‡∏ó‡∏µ',
  content: `# ‚ö°Ô∏è Promises ‡πÅ‡∏•‡∏∞ Async/Await

> *"Master asynchronous programming with Promises and Async/Await in Modern JavaScript"*

## üìù ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ

‚ú® Promise Fundamentals  
üîÑ Async/Await Syntax  
üéØ Error Handling  
üí° Advanced Patterns  

## 1. üé® Promises

### Promise Basics
- üì¶ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Promise (pending, fulfilled, rejected)
- üéØ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Promise ‡∏î‡πâ‡∏ß‡∏¢ Promise constructor
- üí° Promise chaining (.then, .catch, .finally)
- ‚ö°Ô∏è Error propagation

### Promise Methods
- üöÄ Promise.all() - ‡∏£‡∏≠‡∏ó‡∏∏‡∏Å promises ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
- ‚ö°Ô∏è Promise.race() - ‡∏£‡∏≠ promise ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
- üéØ Promise.allSettled() - ‡∏£‡∏≠‡∏ó‡∏∏‡∏Å promises ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
- üí´ Promise.any() - ‡∏£‡∏≠ promise ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

## 2. üîÑ Async/Await

### ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
- üìù async functions ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£ return Promise
- üéØ await expression ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
- üí° ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á Promise chains ‡πÄ‡∏õ‡πá‡∏ô async/await
- ‚ö°Ô∏è Top-level await (ES2022+)

### Error Handling
- ‚ö†Ô∏è try/catch blocks ‡∏Å‡∏±‡∏ö async/await
- üõ°Ô∏è ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ errors ‡πÉ‡∏ô Promise chains
- üí° Error boundaries ‡πÅ‡∏•‡∏∞ recovery strategies
- üéØ Custom error classes

## 3. üöÄ Advanced Patterns

### Parallel Execution
- üì¶ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Promise.all()
- üéØ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ concurrent requests
- üí° Rate limiting ‡πÅ‡∏•‡∏∞ throttling
- ‚ö°Ô∏è Batch processing

### Sequential Execution
- üîÑ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ for...of
- üéØ Dependencies handling
- üí° Retry mechanisms
- üöÄ Progress tracking

> üí° **Pro Tips**: 
> - ‡πÉ‡∏ä‡πâ async/await ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö
> - ‡πÉ‡∏ä‡πâ Promise.all() ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
> - ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏° error handling ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ`,
  codeExamples: [
    {
      title: '‚ö°Ô∏è Promise Fundamentals',
      language: 'javascript',
      code: `// Creating a Promise
const fetchData = new Promise((resolve, reject) => {
  setTimeout(() => {
    const success = Math.random() > 0.5;
    if (success) {
      resolve({ id: 1, name: 'John' });
    } else {
      reject(new Error('Failed to fetch data'));
    }
  }, 1000);
});

// Promise chaining
fetchData
  .then(data => {
    console.log('Data:', data);
    return processData(data);
  })
  .then(result => {
    console.log('Result:', result);
  })
  .catch(error => {
    console.error('Error:', error);
  })
  .finally(() => {
    console.log('Operation completed');
  });

// Promise.all example
const promises = [
  fetch('/api/users'),
  fetch('/api/posts'),
  fetch('/api/comments')
];

Promise.all(promises)
  .then(([users, posts, comments]) => {
    // All requests completed successfully
  })
  .catch(error => {
    // Any request failed
  });`
    },
    {
      title: 'üîÑ Async/Await Patterns',
      language: 'javascript',
      code: `// Basic async/await
async function getUserData(userId) {
  try {
    const user = await fetchUser(userId);
    const posts = await fetchPosts(user.id);
    const comments = await fetchComments(posts[0].id);
    return { user, posts, comments };
  } catch (error) {
    console.error('Error fetching user data:', error);
    throw error;
  }
}

// Parallel execution
async function getMultipleUsers(userIds) {
  try {
    const userPromises = userIds.map(id => fetchUser(id));
    const users = await Promise.all(userPromises);
    return users;
  } catch (error) {
    console.error('Error fetching users:', error);
    throw error;
  }
}

// Sequential execution with progress
async function processItems(items, onProgress) {
  const results = [];
  for (const [index, item] of items.entries()) {
    try {
      const result = await processItem(item);
      results.push(result);
      onProgress((index + 1) / items.length);
    } catch (error) {
      console.error(\`Error processing item \${index}:\`, error);
    }
  }
  return results;
}

// Retry mechanism
async function fetchWithRetry(url, maxAttempts = 3) {
  for (let attempt = 1; attempt <= maxAttempts; attempt++) {
    try {
      return await fetch(url);
    } catch (error) {
      if (attempt === maxAttempts) throw error;
      const delay = Math.min(1000 * Math.pow(2, attempt - 1), 5000);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
}`
    },
    {
      title: 'üöÄ Real-world Examples',
      language: 'javascript',
      code: `// Custom Promise wrapper
function timeout(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Rate limiting
async function fetchWithRateLimit(urls, concurrency = 3) {
  const results = [];
  for (let i = 0; i < urls.length; i += concurrency) {
    const batch = urls.slice(i, i + concurrency);
    const batchResults = await Promise.all(
      batch.map(url => fetch(url))
    );
    results.push(...batchResults);
    await timeout(1000); // Rate limiting delay
  }
  return results;
}

// Progress tracking with async/await
async function uploadFiles(files, onProgress) {
  const total = files.length;
  const results = [];
  
  for (const [index, file] of files.entries()) {
    try {
      const result = await uploadFile(file);
      results.push(result);
      onProgress({
        completed: index + 1,
        total,
        percentage: ((index + 1) / total) * 100
      });
    } catch (error) {
      console.error(\`Failed to upload \${file.name}:\`, error);
    }
  }
  
  return results;
}

// Error boundary pattern
class AsyncBoundary {
  static async run(fn, fallback) {
    try {
      return await fn();
    } catch (error) {
      console.error('Error in async boundary:', error);
      return fallback;
    }
  }
}`
    }
  ],
  quiz: [
    {
      id: 1,
      question: "Promise ‡∏°‡∏µ‡∏Å‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?",
      options: [
        "2 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: fulfilled ‡πÅ‡∏•‡∏∞ rejected",
        "3 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: pending, fulfilled ‡πÅ‡∏•‡∏∞ rejected",
        "4 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: pending, running, fulfilled ‡πÅ‡∏•‡∏∞ rejected",
        "1 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: completed"
      ],
      correctAnswer: 1,
      explanation: "Promise ‡∏°‡∏µ 3 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡∏Ñ‡∏∑‡∏≠ pending (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£), fulfilled (‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à) ‡πÅ‡∏•‡∏∞ rejected (‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß) ‡πÇ‡∏î‡∏¢ Promise ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ pending ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô fulfilled ‡∏´‡∏£‡∏∑‡∏≠ rejected ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
    },
    {
      id: 2,
      question: "‡∏Ç‡πâ‡∏≠‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏Ç‡∏≠‡∏á async/await ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö Promise chains?",
      options: [
        "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤",
        "‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤",
        "‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô",
        "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ errors"
      ],
      correctAnswer: 2,
      explanation: "async/await ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ Promise chains ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö sequential ‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô"
    },
    {
      id: 3,
      question: "Promise.all() ‡πÅ‡∏•‡∏∞ Promise.race() ‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
      options: [
        "Promise.all() ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤",
        "Promise.all() ‡∏£‡∏≠‡∏ó‡∏∏‡∏Å promises ‡πÄ‡∏™‡∏£‡πá‡∏à, Promise.race() ‡∏£‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à",
        "Promise.race() ‡∏£‡∏≠‡∏ó‡∏∏‡∏Å promises ‡πÄ‡∏™‡∏£‡πá‡∏à, Promise.all() ‡∏£‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à",
        "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á"
      ],
      correctAnswer: 1,
      explanation: "Promise.all() ‡∏à‡∏∞‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å promises ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞ resolve ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ó‡∏µ‡πà Promise.race() ‡∏à‡∏∞ resolve ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ promise ‡∏ï‡∏±‡∏ß‡πÉ‡∏î‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å"
    },
    {
      id: 4,
      question: "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡πÉ‡∏ô async/await ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
      options: [
        "‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ errors",
        "‡πÉ‡∏ä‡πâ .catch() ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
        "‡πÉ‡∏ä‡πâ try/catch block",
        "‡πÉ‡∏ä‡πâ if/else"
      ],
      correctAnswer: 2,
      explanation: "‡πÉ‡∏ô async/await ‡πÄ‡∏£‡∏≤‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ try/catch block ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ errors ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ errors ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
    }
  ]
};